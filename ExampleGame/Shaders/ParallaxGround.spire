using "../../EngineContent/Shaders/GLPipeline.shader";
using "../../EngineContent/Shaders/Utils.shader";

//using "DefaultGeometry.shader";
module MaterialGeometry
{
    require vec3 coarseVertPos;
    require vec3 coarseVertNormal;
    public using NoTessellation;
    public vec3 displacement = vec3(0.0);
}
module MaterialPattern implements IMaterialPattern
{
    param Texture2D albedoMap;
    param Texture2D normalMap;
    param Texture2D displacementMap;
    param float uvScale;

    require vec2 vertUV;
    require vec3 WorldSpaceToTangentSpace(vec3 v);
    require vec3 cameraPos;
    require vec3 pos;
    require SamplerState textureSampler;

    vec3 viewDirTan = WorldSpaceToTangentSpace(normalize(cameraPos - pos));

    float getGroundHeight(vec2 uvCoord)
    {
        return displacementMap.Sample(textureSampler, uvCoord).r;
    } 

    using pom = ParallaxOcclusionMapping(
        GetHeight: getGroundHeight,
        viewDirTangentSpace: viewDirTan,
        uv: vertUV * uvScale,
        parallaxScale: 0.02
    );
    
    vec2 uv = pom.uvOut;
    public vec3 albedo = albedoMap.Sample(textureSampler, uv).xyz * 0.7;
    public vec3 normal = normalize(normalMap.Sample(textureSampler, uv).xyz * 2.0 - 1.0);
    public float roughness = 0.5;
    public float metallic = 0.3;
    public float specular = 1.0;
    public float selfShadow(vec3 lightDir)
    {
        return pom.selfShadow(WorldSpaceToTangentSpace(lightDir));        
    }
}module VertexAttributes
{
public @MeshVertex vec3 vertPos;
public @MeshVertex vec2 vertUV0;
public inline vec2 vertUV1 = vec2(0.0);
public inline vec2 vertUV2 = vec2(0.0);
public inline vec2 vertUV3 = vec2(0.0);
public inline vec2 vertUV4 = vec2(0.0);
public inline vec2 vertUV5 = vec2(0.0);
public inline vec2 vertUV6 = vec2(0.0);
public inline vec2 vertUV7 = vec2(0.0);
public vec2 vertUV = vertUV0;

				@MeshVertex uint tangentFrame;
				vec4 tangentFrameQuaternion
				{
					vec4 result;
					float inv255 = 2.0 / 255.0;
					result.x = float(tangentFrame & 255) * inv255 - 1.0;
					result.y = float((tangentFrame >> 8) & 255) * inv255 - 1.0;
					result.z = float((tangentFrame >> 16) & 255) * inv255 - 1.0;
					result.w = float((tangentFrame >> 24) & 255) * inv255 - 1.0;
					return result;
				}
				public @CoarseVertex vec3 vertNormal
				{
					return normalize(QuaternionRotate(tangentFrameQuaternion, vec3(0.0, 1.0, 0.0)));
				}
				public @CoarseVertex vec3 vertTangent
				{
					return normalize(QuaternionRotate(tangentFrameQuaternion, vec3(1.0, 0.0, 0.0)));
				}
				public vec3 vertBinormal = cross(vertTangent, vertNormal);
				public inline vec4 vertColor0 = vec4(0.0);
public inline vec4 vertColor1 = vec4(0.0);
public inline vec4 vertColor2 = vec4(0.0);
public inline vec4 vertColor3 = vec4(0.0);
public inline vec4 vertColor4 = vec4(0.0);
public inline vec4 vertColor5 = vec4(0.0);
public inline vec4 vertColor6 = vec4(0.0);
public inline vec4 vertColor7 = vec4(0.0);
public inline uint boneIds = 255;
public inline uint boneWeights = 0;
}

			shader GBufferPass targets StandardPipeline
			{
				public using VertexAttributes;
				[Binding: "0"]
				public using ForwardBasePassParams;
				[Binding: "3"]
				public using NoAnimation;
				public using TangentSpaceTransform;
				public using MaterialGeometry;
				public using VertexTransform;
				[Binding: "2"]
				public using MaterialPattern;
				vec3 lightParam = vec3(roughness, metallic, specular);
				public out @Fragment vec3 outputAlbedo = albedo;
				public out @Fragment vec3 outputPbr = lightParam;
				public out @Fragment vec3 outputNormal = TangentSpaceToWorldSpace(vec3(normal.x, -normal.y, normal.z)) * 0.5 + 0.5;
			};
		